{"ast":null,"code":"import request from \"@/utils/request\";\n\n// 商品分类模块接口请求统一前缀，往后端发送请求的时候加上这个前缀\nlet baseUrl = \"/type/\";\nexport default {\n  data() {\n    return {\n      user: {},\n      tableData: [],\n      // 这是管理员记录数据\n      pageNum: 1,\n      // 这是页码\n      dialogVisible: false,\n      // 这是管理员信息修改这个对话框的显示状态\n      search: {},\n      // 这是搜索框的数据\n      form: {},\n      // 这是对话框表单的数据\n      total: 0 // 这是总记录数\n    };\n  },\n  // 页面加载的时候，做一些事情，在created里面\n  mounted() {\n    this.load();\n  },\n  // 定义一些页面上控件出发的事件调用的方法\n  methods: {\n    // 计算表格操作列的总宽度，并存储在colWidth属性中，用于设置表格操作列的宽度\n    operationSpace() {\n      let width = 0;\n      let _this = this;\n      setTimeout(() => {\n        let rows = document.getElementsByClassName('el-table__row');\n        if (rows && rows.length) {\n          let tds = rows[0].getElementsByTagName('td');\n          let btns = tds[tds.length - 1].getElementsByTagName('button');\n          for (let i = 0; i < btns.length; i++) {\n            width += btns[i].offsetWidth + 5;\n          }\n          _this.colWidth = width;\n        }\n      }, 0);\n    },\n    // 分页加载表格数据，这个在mount里面就调用过一次，也就是说打开这个页面就会加载一次数据库的记录到页面上，而且在用户增删改查后也会加载一次\n    load() {\n      request.post(baseUrl + \"page?pageNum=\" + this.pageNum, this.search).then(res => {\n        if (res.code === '0') {\n          this.tableData = res.data.list;\n          this.total = res.data.total;\n          this.operationSpace();\n        } else {\n          this.$notify.error(res.msg);\n        }\n      });\n    },\n    // 新增初始化对话框\n    add() {\n      this.form = {};\n      this.dialogVisible = true;\n    },\n    // 编辑初始化模态框\n    edit(row) {\n      this.form = JSON.parse(JSON.stringify(row));\n      this.dialogVisible = true;\n    },\n    // 编辑数据保存\n    save() {\n      if (!this.form.id) {\n        // 没有ID，说明是新增操作\n        request.post(baseUrl, this.form).then(res => {\n          if (res.code === '0') {\n            this.$notify.success(\"添加成功\");\n            this.dialogVisible = false;\n            this.load();\n          } else {\n            this.$notify.error(res.msg);\n          }\n        });\n      } else {\n        // 有ID，说明是更新操作\n        request.put(baseUrl, this.form).then(res => {\n          if (res.code === '0') {\n            this.$notify.success('更新成功');\n            this.dialogVisible = false;\n            this.load();\n          } else {\n            this.$notify.error(res.msg);\n          }\n        });\n      }\n    },\n    // 根据ID删除某条数据\n    del(id) {\n      request.delete(baseUrl + id).then(res => {\n        if (res.code === '0') {\n          this.$notify.success('删除成功');\n          this.load();\n        } else {\n          this.$notify.error(res.msg);\n        }\n      });\n    },\n    // 换页的时候更改页码，然后重新加载数据\n    handleCurrentChange(pageNum) {\n      this.pageNum = pageNum;\n      this.load();\n    }\n  }\n};","map":{"version":3,"names":["request","baseUrl","data","user","tableData","pageNum","dialogVisible","search","form","total","mounted","load","methods","operationSpace","width","_this","setTimeout","rows","document","getElementsByClassName","length","tds","getElementsByTagName","btns","i","offsetWidth","colWidth","post","then","res","code","list","$notify","error","msg","add","edit","row","JSON","parse","stringify","save","id","success","put","del","delete","handleCurrentChange"],"sources":["src/views/manager/Type.vue"],"sourcesContent":["<!-- 信息管理/商品分类页面 -->\n<template>\n  <div>\n    <div>\n      <div class=\"main-body-content\">\n        <!-- 顶部 -->\n        <div class=\"main-body-search\">\n          <div class=\"main-body-header\">商品分类管理</div>\n          <el-input size=\"small\" class=\"main-input\" placeholder=\"请输入分类名称\" v-model=\"search.name\"></el-input>\n\t\t\t\t\t<el-button size=\"small\" type=\"primary\" @click=\"load()\">查询</el-button>\n\t\t\t\t\t<el-button size=\"small\" type=\"primary\" @click=\"add\">新增</el-button>\n        </div>\n\n        <!-- 中部表格 -->\n        <div class=\"main-table-box\">\n          <el-table style=\"width: 100%\" :data=\"tableData\" size=\"small\" strip header-cell-class-name=\"tableHeaderClass\" >\n\t\t\t\t\t\t<el-table-column label=\"分类名称\" prop=\"name\"></el-table-column>\n\t\t\t\t\t\t<el-table-column label=\"分类描述\" prop=\"description\"></el-table-column>\n            <el-table-column label=\"操作\" fixed=\"right\">\n              <template v-slot=\"scope\">\n\t\t\t\t\t\t\t\t<el-button size=\"small\" type=\"primary\" @click=\"edit(scope.row)\">编辑</el-button>\n\t\t\t\t\t\t\t\t<el-popconfirm title=\"确定删除吗？\" @confirm=\"del(scope.row.id)\">\n\t\t\t\t\t\t\t\t\t<el-button size=\"small\" type=\"danger\" slot=\"reference\">删除</el-button>\n\t\t\t\t\t\t\t\t</el-popconfirm>\n              </template>\n            </el-table-column>\n          </el-table>\n        </div>\n\n        <!-- 表格的分页，在提供每页的记录数和总记录数后该组件会自动计算页数 -->\n        <div style=\"margin: 20px 0\">\n          <el-pagination\n              background\n              @current-change=\"handleCurrentChange\"\n              :current-page=\"pageNum\"\n              :page-size=\"5\"\n              layout=\"total, prev, pager, next\"\n              :total=\"total\">\n          </el-pagination>\n        </div>\n      </div>\n    </div>\n\n    <!-- 种类信息编辑对话框 -->\n    <el-dialog title=\"请填写信息\" :visible.sync=\"dialogVisible\" width=\"40%\">\n      <el-form :model=\"form\" label-position=\"right\" label-width=\"100px\" style=\"padding-right: 40px\">\n        <!-- 分类名称修改 -->\n\t\t\t\t<el-form-item label=\"分类名称\">\n\t\t\t\t\t<el-input size=\"small\" v-model=\"form.name\" placeholder=\"请输入分类名称\"></el-input>\n\t\t\t\t</el-form-item>\n\n        <!-- 分类描述修改 -->\n\t\t\t\t<el-form-item label=\"分类描述\">\n\t\t\t\t\t<el-input size=\"small\" v-model=\"form.description\" placeholder=\"请输入分类描述\"></el-input>\n\t\t\t\t</el-form-item>\n      </el-form>\n\n      <!-- 修改信息后的操作按钮 -->\n      <div slot=\"footer\" class=\"dialog-footer\">\n          <el-button size=\"small\" @click=\"dialogVisible = false\">取 消</el-button>\n          <el-button size=\"small\" type=\"primary\" @click=\"save\">保 存</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport request from \"@/utils/request\";\n\n// 商品分类模块接口请求统一前缀，往后端发送请求的时候加上这个前缀\nlet baseUrl = \"/type/\"\n\nexport default {\n  data() {\n    return {\n      user: {},\n      tableData: [], // 这是管理员记录数据\n      pageNum: 1, // 这是页码\n      dialogVisible: false, // 这是管理员信息修改这个对话框的显示状态\n      search: {}, // 这是搜索框的数据\n      form: {}, // 这是对话框表单的数据\n      total: 0, // 这是总记录数\n    }\n  },\n\n  // 页面加载的时候，做一些事情，在created里面\n  mounted() {\n    this.load()\n  },\n\n  // 定义一些页面上控件出发的事件调用的方法\n  methods: {\n    // 计算表格操作列的总宽度，并存储在colWidth属性中，用于设置表格操作列的宽度\n    operationSpace() {\n      let width = 0\n      let _this = this\n      setTimeout(() => {\n        let rows = document.getElementsByClassName('el-table__row');\n        if (rows && rows.length) {\n          let tds = rows[0].getElementsByTagName('td')\n          let btns = tds[tds.length - 1].getElementsByTagName('button')\n          for (let i = 0; i <btns.length; i++) {\n            width += btns[i].offsetWidth + 5\n          }\n          _this.colWidth = width\n        }\n      }, 0)\n    },\n\n    // 分页加载表格数据，这个在mount里面就调用过一次，也就是说打开这个页面就会加载一次数据库的记录到页面上，而且在用户增删改查后也会加载一次\n    load() {\n      request.post(baseUrl + \"page?pageNum=\" + this.pageNum, this.search).then(res => {\n        if (res.code === '0') {\n          this.tableData = res.data.list;\n          this.total = res.data.total;\n          this.operationSpace();\n        } else {\n          this.$notify.error(res.msg);\n        }\n      });\n    },\n\n    // 新增初始化对话框\n    add() {\n      this.form = {};\n\n      this.dialogVisible = true;\n    },\n\n    // 编辑初始化模态框\n    edit(row) {\n      this.form = JSON.parse(JSON.stringify(row));\n\n      this.dialogVisible = true;\n    },\n\n    // 编辑数据保存\n    save() {\n      if (!this.form.id) {\n        // 没有ID，说明是新增操作\n        request.post(baseUrl, this.form).then(res => {\n          if (res.code === '0') {\n            this.$notify.success(\"添加成功\");\n            this.dialogVisible = false;\n            this.load();\n          } else {\n            this.$notify.error(res.msg);\n          }\n        })\n      } else {\n        // 有ID，说明是更新操作\n        request.put(baseUrl, this.form).then(res => {\n          if (res.code === '0') {\n            this.$notify.success('更新成功');\n            this.dialogVisible = false;\n            this.load();\n          } else {\n            this.$notify.error(res.msg);\n          }\n        })\n      }\n    },\n    // 根据ID删除某条数据\n    del(id) {\n      request.delete(baseUrl + id).then(res => {\n        if (res.code === '0') {\n          this.$notify.success('删除成功');\n          this.load();\n        } else {\n          this.$notify.error(res.msg);\n        }\n      });\n    },\n\n    // 换页的时候更改页码，然后重新加载数据\n    handleCurrentChange(pageNum) {\n      this.pageNum = pageNum;\n      this.load();\n    },\n  }\n}\n</script>\n"],"mappings":"AAmEA,OAAAA,OAAA;;AAEA;AACA,IAAAC,OAAA;AAEA;EACAC,KAAA;IACA;MACAC,IAAA;MACAC,SAAA;MAAA;MACAC,OAAA;MAAA;MACAC,aAAA;MAAA;MACAC,MAAA;MAAA;MACAC,IAAA;MAAA;MACAC,KAAA;IACA;EACA;EAEA;EACAC,QAAA;IACA,KAAAC,IAAA;EACA;EAEA;EACAC,OAAA;IACA;IACAC,eAAA;MACA,IAAAC,KAAA;MACA,IAAAC,KAAA;MACAC,UAAA;QACA,IAAAC,IAAA,GAAAC,QAAA,CAAAC,sBAAA;QACA,IAAAF,IAAA,IAAAA,IAAA,CAAAG,MAAA;UACA,IAAAC,GAAA,GAAAJ,IAAA,IAAAK,oBAAA;UACA,IAAAC,IAAA,GAAAF,GAAA,CAAAA,GAAA,CAAAD,MAAA,MAAAE,oBAAA;UACA,SAAAE,CAAA,MAAAA,CAAA,GAAAD,IAAA,CAAAH,MAAA,EAAAI,CAAA;YACAV,KAAA,IAAAS,IAAA,CAAAC,CAAA,EAAAC,WAAA;UACA;UACAV,KAAA,CAAAW,QAAA,GAAAZ,KAAA;QACA;MACA;IACA;IAEA;IACAH,KAAA;MACAX,OAAA,CAAA2B,IAAA,CAAA1B,OAAA,0BAAAI,OAAA,OAAAE,MAAA,EAAAqB,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAC,IAAA;UACA,KAAA1B,SAAA,GAAAyB,GAAA,CAAA3B,IAAA,CAAA6B,IAAA;UACA,KAAAtB,KAAA,GAAAoB,GAAA,CAAA3B,IAAA,CAAAO,KAAA;UACA,KAAAI,cAAA;QACA;UACA,KAAAmB,OAAA,CAAAC,KAAA,CAAAJ,GAAA,CAAAK,GAAA;QACA;MACA;IACA;IAEA;IACAC,IAAA;MACA,KAAA3B,IAAA;MAEA,KAAAF,aAAA;IACA;IAEA;IACA8B,KAAAC,GAAA;MACA,KAAA7B,IAAA,GAAA8B,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAE,SAAA,CAAAH,GAAA;MAEA,KAAA/B,aAAA;IACA;IAEA;IACAmC,KAAA;MACA,UAAAjC,IAAA,CAAAkC,EAAA;QACA;QACA1C,OAAA,CAAA2B,IAAA,CAAA1B,OAAA,OAAAO,IAAA,EAAAoB,IAAA,CAAAC,GAAA;UACA,IAAAA,GAAA,CAAAC,IAAA;YACA,KAAAE,OAAA,CAAAW,OAAA;YACA,KAAArC,aAAA;YACA,KAAAK,IAAA;UACA;YACA,KAAAqB,OAAA,CAAAC,KAAA,CAAAJ,GAAA,CAAAK,GAAA;UACA;QACA;MACA;QACA;QACAlC,OAAA,CAAA4C,GAAA,CAAA3C,OAAA,OAAAO,IAAA,EAAAoB,IAAA,CAAAC,GAAA;UACA,IAAAA,GAAA,CAAAC,IAAA;YACA,KAAAE,OAAA,CAAAW,OAAA;YACA,KAAArC,aAAA;YACA,KAAAK,IAAA;UACA;YACA,KAAAqB,OAAA,CAAAC,KAAA,CAAAJ,GAAA,CAAAK,GAAA;UACA;QACA;MACA;IACA;IACA;IACAW,IAAAH,EAAA;MACA1C,OAAA,CAAA8C,MAAA,CAAA7C,OAAA,GAAAyC,EAAA,EAAAd,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAC,IAAA;UACA,KAAAE,OAAA,CAAAW,OAAA;UACA,KAAAhC,IAAA;QACA;UACA,KAAAqB,OAAA,CAAAC,KAAA,CAAAJ,GAAA,CAAAK,GAAA;QACA;MACA;IACA;IAEA;IACAa,oBAAA1C,OAAA;MACA,KAAAA,OAAA,GAAAA,OAAA;MACA,KAAAM,IAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}