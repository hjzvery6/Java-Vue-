{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ElMessage } from 'element-ui';\n// import AudioBase from \"@/components/AudioBase.vue\";\nimport { get, post } from '@/utils/request';\nimport { API } from '@/api/config';\nexport default {\n  name: 'ChatPage',\n  // components: {\n  //   AudioBase\n  // },\n  data() {\n    return {\n      historyList: [{\n        title: '推荐一些运动装备',\n        messages: [{\n          role: 'assistant',\n          content: '您好！你需要什么帮助？'\n        }, {\n          role: 'user',\n          content: '我想要一些运动装备'\n        }, {\n          role: 'assistant',\n          content: '让我来帮您分析一下。您需要的是什么运动的装备呢？'\n        }]\n      },\n      // { \n      //   title: '比奇堡特色菜单咨询',\n      //   messages: [\n      //     { role: 'user', content: '请问比奇堡最受欢迎的菜品有哪些？' },\n      //     { role: 'assistant', content: '当然是蟹堡王的招牌美食啦！我们的经典蟹堡、海藻薯条和珊瑚果汁都非常受欢迎。特别是蟹堡，采用秘制酱料配方，每天都有无数顾客专程来品尝呢！' }\n      //   ]\n      // },\n      // { \n      //   title: '配送服务咨询',\n      //   messages: [\n      //     { role: 'user', content: '你们有送餐服务吗？我在水母荡。' },\n      //     { role: 'assistant', content: '是的，我们提供送餐服务！水母荡在我们的配送范围内。派大星是我们最可靠的送餐员，保证30分钟内送达，否则您可以获得一个免费的海藻汉堡！' }\n      //   ]\n      // },\n      {\n        title: '这里都是前端写死的'\n      }, {\n        title: '因为后端还没接数据库'\n      }, {\n        title: '大家要用的话自己改一下'\n      }],\n      currentConversationIndex: 0,\n      userInput: '',\n      isListening: false,\n      isRecording: false,\n      mediaRecorder: null,\n      audioChunks: [],\n      mediaStream: null,\n      isInputDisabled: false\n    };\n  },\n  computed: {\n    currentConversation() {\n      return this.historyList[this.currentConversationIndex];\n    }\n  },\n  methods: {\n    selectConversation(index) {\n      this.currentConversationIndex = index;\n      this.$nextTick(() => {\n        this.scrollToBottom();\n      });\n    },\n    newConversation() {\n      this.historyList.unshift({\n        title: '新对话',\n        // 实际上这里要和后端交互的话，messages 最好用 map 格式，key 是对应的 id，这样方便后端根据 id 来操作消息\n        messages: [{\n          role: 'assistant',\n          content: '您好！我是蟹堡王的神奇海螺，很高兴为您服务！我可以回答关于蟹堡王和汉堡制作的任何问题，您有什么需要帮助的吗？'\n        }]\n      });\n      this.currentConversationIndex = 0;\n    },\n    async sendMessage() {\n      if (this.userInput.trim()) {\n        // 添加用户消息\n        this.currentConversation.messages.push({\n          role: 'user',\n          content: this.userInput\n        });\n        const prompt = this.userInput;\n        this.userInput = '';\n        this.$nextTick(() => {\n          this.scrollToBottom();\n        });\n        const loadingMessage = {\n          role: 'assistant',\n          content: '神奇海螺正在思考...',\n          loading: true // 标记为加载状态\n        };\n        this.currentConversation.messages.push(loadingMessage);\n        this.$nextTick(() => {\n          this.scrollToBottom();\n        });\n\n        // 获取AI回复\n        try {\n          const res = await get(API.GENERATE, {\n            prompt: prompt\n          });\n          if (res.code == 100) {\n            // 更新加载中的消息为实际回复\n            loadingMessage.content = res.data;\n            loadingMessage.loading = false; // 更新为非加载状态\n            this.$nextTick(() => {\n              this.scrollToBottom();\n            });\n          } else {\n            this.$message.error(res.msg);\n            loadingMessage.content = '获取回复失败，请稍后重试';\n            loadingMessage.loading = false;\n            this.$nextTick(() => {\n              this.scrollToBottom();\n            });\n          }\n        } catch (error) {\n          console.error('sendMessage error', error);\n          this.$message.error('获取回复失败，请稍后重试');\n          loadingMessage.content = '获取回复失败，请稍后重试';\n          loadingMessage.loading = false;\n          this.$nextTick(() => {\n            this.scrollToBottom();\n          });\n        }\n      }\n    },\n    finishRecording() {\n      if (this.isRecording && this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {\n        this.mediaRecorder.stop();\n        this.isRecording = false;\n        this.isInputDisabled = false;\n      }\n    },\n    sendAudioMessage(audioBlob) {\n      const audioUrl = URL.createObjectURL(audioBlob);\n      this.currentConversation.messages.push({\n        role: 'user',\n        content: '发送了一条语音消息',\n        audioUrl: audioUrl\n      });\n      this.$nextTick(() => {\n        this.scrollToBottom();\n      });\n    },\n    toggleRecording() {\n      // 在Vue 2中实现录音功能\n    },\n    stopMediaStream() {\n      if (this.mediaStream) {\n        this.mediaStream.getTracks().forEach(track => track.stop());\n        this.mediaStream = null;\n      }\n    },\n    scrollToBottom() {\n      const chatMessages = this.$refs.chatMessagesRef;\n      chatMessages.scrollTop = chatMessages.scrollHeight;\n    }\n  },\n  mounted() {\n    // 组件挂载后的逻辑\n  },\n  beforeDestroy() {\n    // 组件销毁前的清理工作\n    this.finishRecording();\n    this.stopMediaStream();\n  }\n};","map":{"version":3,"names":["ElMessage","get","post","API","name","data","historyList","title","messages","role","content","currentConversationIndex","userInput","isListening","isRecording","mediaRecorder","audioChunks","mediaStream","isInputDisabled","computed","currentConversation","methods","selectConversation","index","$nextTick","scrollToBottom","newConversation","unshift","sendMessage","trim","push","prompt","loadingMessage","loading","res","GENERATE","code","$message","error","msg","console","finishRecording","state","stop","sendAudioMessage","audioBlob","audioUrl","URL","createObjectURL","toggleRecording","stopMediaStream","getTracks","forEach","track","chatMessages","$refs","chatMessagesRef","scrollTop","scrollHeight","mounted","beforeDestroy"],"sources":["src/views/front/ChatPage.vue"],"sourcesContent":["<template>\r\n    <div class=\"ai-practice-container\">\r\n      <!-- 左侧历史对话记录 -->\r\n      <div class=\"history-panel\">\r\n        <div class=\"new-chat-container\">\r\n          <button class=\"new-chat-btn\" @click=\"newConversation\">\r\n            新建对话\r\n            <i class=\"el-icon-plus plus-icon\"></i>\r\n          </button>\r\n        </div>\r\n        <ul class=\"history-list\">\r\n          <li v-for=\"(item, index) in historyList\" :key=\"index\" @click=\"selectConversation(index)\"\r\n              :class=\"{ active: currentConversationIndex === index }\">\r\n            {{ item.title }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n  \r\n      <!-- 右侧对话页面 -->\r\n      <div class=\"chat-wrapper\">\r\n        <div class=\"chat-panel\">\r\n          <!-- 上半部分聊天界面 -->\r\n          <div class=\"chat-messages\" ref=\"chatMessagesRef\">\r\n            <div v-for=\"(message, index) in currentConversation.messages\" :key=\"index\" :class=\"['message', message.role]\">\r\n              <div class=\"avatar\">\r\n                <div v-if=\"message.role !== 'user'\" class=\"ai-avatar\">\r\n                  <img src=\"@/assets/images/hailuo2.png\" alt=\"AI Avatar\">\r\n                </div>\r\n                <div v-else>\r\n                  <img src=\"@/assets/images/user.png\" alt=\"Me\">\r\n                </div>\r\n              </div>\r\n              <div class=\"content\">\r\n                {{ message.content }}\r\n                <!--              <audio v-if=\"message.audioUrl\" :src=\"message.audioUrl\" controls></audio>-->\r\n                <!-- <AudioBase></AudioBase> -->\r\n              </div>\r\n            </div>\r\n          </div>\r\n  \r\n          <!-- 输入框 -->\r\n          <div class=\"input-area\">\r\n            <div class=\"input-wrapper\">\r\n              <i class=\"el-icon-link input-icon link-icon\"></i>\r\n              <input\r\n                  v-model=\"userInput\"\r\n                  @keyup.enter=\"sendMessage\"\r\n                  placeholder=\"输入消息，按回车发送...\"\r\n                  type=\"text\"\r\n                  :disabled=\"isInputDisabled\"\r\n              >\r\n              <div class=\"button-group\">\r\n                <div class=\"audio-wave\" v-if=\"isRecording\" @click=\"finishRecording\">\r\n                  <span v-for=\"n in 4\" :key=\"n\" :style=\"{ animationDelay: `${n * 0.2}s` }\"></span>\r\n                </div>\r\n                <i v-else class=\"el-icon-microphone input-icon microphone-icon\" @click=\"toggleRecording\"></i>\r\n                <div class=\"separator\"></div>\r\n                <el-popover\r\n                    placement=\"top\"\r\n                    :width=\"200\"\r\n                    trigger=\"hover\"\r\n                    :disabled=\"!!userInput.trim()\"\r\n                >\r\n                  <template slot=\"reference\">\r\n                    <el-button\r\n                        class=\"send-button\"\r\n                        circle\r\n                        @click=\"sendMessage\"\r\n                        :disabled=\"!userInput.trim()\"\r\n                    >\r\n                      <i class=\"el-icon-top\"></i>\r\n                    </el-button>\r\n                  </template>\r\n                  <span>请文字/录音/上传语音回复</span>\r\n                </el-popover>\r\n              </div>\r\n            </div>\r\n          </div>\r\n  \r\n          <div class=\"disclaimer\">\r\n            服务生成的所有内容均由大模型生成，其生成内容的准确性和完整性无法保证\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ElMessage } from 'element-ui';\r\n  // import AudioBase from \"@/components/AudioBase.vue\";\r\n  import { get, post } from '@/utils/request'\r\n  import { API } from '@/api/config'\r\n  \r\n  export default {\r\n    name: 'ChatPage',\r\n    // components: {\r\n    //   AudioBase\r\n    // },\r\n    data() {\r\n      return {\r\n        historyList: [\r\n          {\r\n            title: '推荐一些运动装备',\r\n            messages: [\r\n              {role: 'assistant', content: '您好！你需要什么帮助？'},\r\n              {role: 'user', content: '我想要一些运动装备'},\r\n              {\r\n                role: 'assistant',\r\n                content: '让我来帮您分析一下。您需要的是什么运动的装备呢？'\r\n              }\r\n            ]\r\n          },\r\n          // { \r\n          //   title: '比奇堡特色菜单咨询',\r\n          //   messages: [\r\n          //     { role: 'user', content: '请问比奇堡最受欢迎的菜品有哪些？' },\r\n          //     { role: 'assistant', content: '当然是蟹堡王的招牌美食啦！我们的经典蟹堡、海藻薯条和珊瑚果汁都非常受欢迎。特别是蟹堡，采用秘制酱料配方，每天都有无数顾客专程来品尝呢！' }\r\n          //   ]\r\n          // },\r\n          // { \r\n          //   title: '配送服务咨询',\r\n          //   messages: [\r\n          //     { role: 'user', content: '你们有送餐服务吗？我在水母荡。' },\r\n          //     { role: 'assistant', content: '是的，我们提供送餐服务！水母荡在我们的配送范围内。派大星是我们最可靠的送餐员，保证30分钟内送达，否则您可以获得一个免费的海藻汉堡！' }\r\n          //   ]\r\n          // },\r\n          {\r\n            title: '这里都是前端写死的',\r\n          },\r\n          {\r\n            title: '因为后端还没接数据库',\r\n          },\r\n          {\r\n            title: '大家要用的话自己改一下',\r\n          }\r\n        ],\r\n        currentConversationIndex: 0,\r\n        userInput: '',\r\n        isListening: false,\r\n        isRecording: false,\r\n        mediaRecorder: null,\r\n        audioChunks: [],\r\n        mediaStream: null,\r\n        isInputDisabled: false\r\n      }\r\n    },\r\n    computed: {\r\n      currentConversation() {\r\n        return this.historyList[this.currentConversationIndex];\r\n      }\r\n    },\r\n    methods: {\r\n      selectConversation(index) {\r\n        this.currentConversationIndex = index;\r\n        this.$nextTick(() => {\r\n          this.scrollToBottom();\r\n        });\r\n      },\r\n      newConversation() {\r\n        this.historyList.unshift({\r\n          title: '新对话',\r\n          // 实际上这里要和后端交互的话，messages 最好用 map 格式，key 是对应的 id，这样方便后端根据 id 来操作消息\r\n          messages: [{\r\n            role: 'assistant',\r\n            content: '您好！我是蟹堡王的神奇海螺，很高兴为您服务！我可以回答关于蟹堡王和汉堡制作的任何问题，您有什么需要帮助的吗？'\r\n          }]\r\n        });\r\n        this.currentConversationIndex = 0;\r\n      },\r\n      async sendMessage() {\r\n        if (this.userInput.trim()) {\r\n          // 添加用户消息\r\n          this.currentConversation.messages.push({role: 'user', content: this.userInput});\r\n          const prompt = this.userInput;\r\n          this.userInput = '';\r\n          this.$nextTick(() => {\r\n            this.scrollToBottom();\r\n          });\r\n  \r\n          const loadingMessage = {\r\n            role: 'assistant',\r\n            content: '神奇海螺正在思考...',\r\n            loading: true // 标记为加载状态\r\n          };\r\n          this.currentConversation.messages.push(loadingMessage);\r\n          this.$nextTick(() => {\r\n            this.scrollToBottom();\r\n          });\r\n  \r\n          // 获取AI回复\r\n          try {\r\n            const res = await get(API.GENERATE, {prompt: prompt});\r\n            if (res.code == 100) {\r\n              // 更新加载中的消息为实际回复\r\n              loadingMessage.content = res.data;\r\n              loadingMessage.loading = false; // 更新为非加载状态\r\n              this.$nextTick(() => {\r\n                this.scrollToBottom();\r\n              });\r\n            } else {\r\n              this.$message.error(res.msg);\r\n              loadingMessage.content = '获取回复失败，请稍后重试';\r\n              loadingMessage.loading = false;\r\n              this.$nextTick(() => {\r\n                this.scrollToBottom();\r\n              });\r\n            }\r\n          } catch (error) {\r\n            console.error('sendMessage error', error);\r\n            this.$message.error('获取回复失败，请稍后重试');\r\n            loadingMessage.content = '获取回复失败，请稍后重试';\r\n            loadingMessage.loading = false;\r\n            this.$nextTick(() => {\r\n              this.scrollToBottom();\r\n            });\r\n          }\r\n        }\r\n      },\r\n      finishRecording() {\r\n        if (this.isRecording && this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {\r\n          this.mediaRecorder.stop();\r\n          this.isRecording = false;\r\n          this.isInputDisabled = false;\r\n        }\r\n      },\r\n      sendAudioMessage(audioBlob) {\r\n        const audioUrl = URL.createObjectURL(audioBlob);\r\n        this.currentConversation.messages.push({\r\n          role: 'user',\r\n          content: '发送了一条语音消息',\r\n          audioUrl: audioUrl\r\n        });\r\n        this.$nextTick(() => {\r\n          this.scrollToBottom();\r\n        });\r\n      },\r\n      toggleRecording() {\r\n        // 在Vue 2中实现录音功能\r\n      },\r\n      stopMediaStream() {\r\n        if (this.mediaStream) {\r\n          this.mediaStream.getTracks().forEach(track => track.stop());\r\n          this.mediaStream = null;\r\n        }\r\n      },\r\n      scrollToBottom() {\r\n        const chatMessages = this.$refs.chatMessagesRef;\r\n        chatMessages.scrollTop = chatMessages.scrollHeight;\r\n      }\r\n    },\r\n    mounted() {\r\n      // 组件挂载后的逻辑\r\n    },\r\n    beforeDestroy() {\r\n      // 组件销毁前的清理工作\r\n      this.finishRecording();\r\n      this.stopMediaStream();\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* 样式保持不变 */\r\n  .ai-practice-container {\r\n    display: flex;\r\n    height: 100vh;\r\n    font-family: Arial, sans-serif;\r\n  }\r\n  \r\n  .history-panel {\r\n    width: 280px;\r\n    background: linear-gradient(135deg, rgba(230, 240, 255, 0.01), rgba(240, 230, 255, 0.01));\r\n    background-color: #ffffff;\r\n    padding: 20px;\r\n    overflow-y: auto;\r\n  }\r\n  \r\n  .new-chat-container {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .new-chat-btn {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 100%;\r\n    padding: 13px; /* 略微增加内边距 */\r\n    margin-top: 10px;\r\n    margin-bottom: 5px;\r\n    background: linear-gradient(to right, #0069e0, #0052bc); /* 改用更深的蓝色渐变 */\r\n    color: white;\r\n    border: none;\r\n    border-radius: 8px;\r\n    cursor: pointer;\r\n    transition: opacity 0.3s;\r\n    font-size: 14px; /* 加大字号 */\r\n    font-weight: bold; /* 加粗字体 */\r\n  }\r\n  \r\n  .new-chat-btn:hover {\r\n    opacity: 0.9;\r\n  }\r\n  \r\n  .history-list {\r\n    list-style-type: none;\r\n    padding: 0;\r\n  }\r\n  \r\n  .history-list li {\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    background-color: #ffffff;\r\n    border-radius: 8px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s;\r\n  }\r\n  \r\n  .history-list li:hover,\r\n  .history-list li.active {\r\n    background-color: rgba(0, 105, 224, 0.15);\r\n    color: #0052bc;\r\n  }\r\n  \r\n  .chat-wrapper {\r\n    flex: 1;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background: linear-gradient(135deg,\r\n    rgba(0, 105, 224, 0.08),\r\n    rgba(0, 56, 148, 0.08)\r\n    );\r\n  }\r\n  \r\n  .chat-panel {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    background-color: transparent;\r\n    box-shadow: none;\r\n    padding-top: 12px; /* 添加顶部内边距 */\r\n    /* padding-left: 10%;\r\n    padding-right: 10%; */\r\n  }\r\n  \r\n  .visitor-info {\r\n    background-color: transparent; /* 背透明 */\r\n    padding: 15px 20px; /* 增加内边距 */\r\n    margin-bottom: 20px; /* 增加与第一条对话的距离 */\r\n    font-weight: bold;\r\n    color: #333;\r\n    text-align: left;\r\n    font-size: 18px; /* 增大字体大小 */\r\n  }\r\n  \r\n  .chat-messages {\r\n    flex: 1;\r\n    overflow-y: auto;\r\n    padding-top: 20px;\r\n    padding-left: 10%;\r\n    padding-right: 10%;\r\n    background-color: transparent;\r\n    /* 修改滚动条颜色 */\r\n    scrollbar-width: thin;\r\n    scrollbar-color: rgba(0, 105, 224, 0.3) transparent;\r\n  }\r\n  \r\n  /* 为 Webkit 浏览器（如 Chrome、Safari）自定义滚动条样式 */\r\n  .chat-messages::-webkit-scrollbar {\r\n    width: 6px;\r\n  }\r\n  \r\n  .chat-messages::-webkit-scrollbar-track {\r\n    background: transparent;\r\n  }\r\n  \r\n  .chat-messages::-webkit-scrollbar-thumb {\r\n    background-color: rgba(0, 105, 224, 0.3);\r\n    border-radius: 3px;\r\n  }\r\n  \r\n  .message {\r\n    display: flex;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .message .avatar {\r\n    width: 40px;\r\n    height: 40px;\r\n    border-radius: 50%;\r\n    background-color: #ffffff;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-right: 10px;\r\n    overflow: hidden;\r\n  }\r\n  \r\n  .message .avatar img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #ffffff;\r\n}\r\n\r\n.message .content {\r\n  background-color: rgba(255, 255, 255, 1);\r\n  padding: 12px 18px; /* 增加内边距 */\r\n  border-radius: 10px;\r\n  max-width: 80%;\r\n  font-size: 16px; /* 增加字体大小 */\r\n  line-height: 1.8; /* 增加行高 */\r\n}\r\n\r\n.message.user {\r\n  flex-direction: row-reverse;\r\n}\r\n\r\n.message.user .avatar {\r\n  margin-right: 0;\r\n  margin-left: 10px;\r\n}\r\n\r\n.message.user .content {\r\n  background-color: rgba(0, 105, 224, 0.12);\r\n  color: black;\r\n}\r\n\r\n.input-area {\r\n  padding: 20px 10% 0 10%;\r\n  border-top: 0px solid #e0e0e0;\r\n  background-color: transparent;\r\n}\r\n\r\n.input-wrapper {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\ninput {\r\n  width: 100%;\r\n  padding: 12px 110px 12px 50px; /* 调整右侧padding以适应新的按钮组 */\r\n  border: 1px solid rgba(204, 204, 204, 0.5);\r\n  border-radius: 25px;\r\n  font-size: 16px;\r\n  background-color: rgba(255, 255, 255, 0.7);\r\n  transition: border-color 0.3s;\r\n  height: 55px;\r\n}\r\n\r\ninput:focus {\r\n  outline: none;\r\n  border-color: #0069e0;\r\n}\r\n\r\ninput::placeholder {\r\n  color: #969696;\r\n}\r\n\r\n.button-group {\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.input-icon {\r\n  color: #0069e0;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n}\r\n\r\n.link-icon {\r\n  position: absolute;\r\n  left: 18px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n}\r\n\r\n.microphone-icon {\r\n  margin-right: 0; /* 将右侧边距改为0 */\r\n}\r\n\r\n.separator {\r\n  width: 1px;\r\n  height: 25px;\r\n  background-color: rgba(204, 204, 204, 0.5);\r\n  margin: 0 10px;\r\n}\r\n\r\n.send-button {\r\n  width: 40px;\r\n  height: 40px;\r\n  background: linear-gradient(to right, #0069e0, #0052bc); /* 保持一致的蓝色渐变 */\r\n  border: none;\r\n  color: white;\r\n  padding: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 50%;\r\n}\r\n\r\n.send-button:disabled {\r\n  background: rgba(0, 105, 224, 0.1);\r\n  color: rgba(0, 82, 188, 0.3);\r\n  cursor: default;\r\n}\r\n\r\n/* Vue 2 中不使用 :deep 选择器，改为 >>> 或 /deep/ */\r\n.send-button >>> .el-icon {\r\n  font-size: 24px;\r\n}\r\n\r\n.send-button:not(:disabled):hover {\r\n  opacity: 0.9;\r\n}\r\n\r\n/* 新增的免责声明样式 */\r\n.disclaimer {\r\n  font-size: 10px;\r\n  color: #999;\r\n  text-align: center;\r\n  margin-top: 12px;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.audio-wave {\r\n  display: flex;\r\n  align-items: center;\r\n  height: 24px;\r\n  width: 24px;\r\n}\r\n\r\n.audio-wave span {\r\n  display: inline-block;\r\n  width: 3px;\r\n  height: 100%;\r\n  margin-right: 1px;\r\n  background: #0069e0;\r\n  animation: audio-wave 0.8s infinite ease-in-out;\r\n}\r\n\r\n@keyframes audio-wave {\r\n  0%, 100% {\r\n    transform: scaleY(0.3);\r\n  }\r\n  50% {\r\n    transform: scaleY(1);\r\n  }\r\n}\r\n\r\n.message .content audio {\r\n  margin-top: 10px;\r\n  width: 100%;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}