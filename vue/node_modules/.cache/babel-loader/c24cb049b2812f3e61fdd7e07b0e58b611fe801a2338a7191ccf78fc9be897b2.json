{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ref, computed, nextTick, onMounted, onUnmounted } from 'vue';\nimport { Link, Microphone } from '@element-plus/icons';\nimport { ElMessage } from 'element-plus';\n// import AudioBase from \"@/components/AudioBase.vue\";\nimport { get, post } from '@/utils/request';\nimport { API } from '@/api/config';\nexport default {\n  __name: 'ChatPage',\n  setup(__props) {\n    const historyList = ref([{\n      title: '推荐一些运动装备',\n      messages: [{\n        role: 'assistant',\n        content: '您好！你需要什么帮助？'\n      }, {\n        role: 'user',\n        content: '我想要一些运动装备'\n      }, {\n        role: 'assistant',\n        content: '让我来帮您分析一下。您需要的是什么运动的装备呢？'\n      }]\n    },\n    // { \n    //   title: '比奇堡特色菜单咨询',\n    //   messages: [\n    //     { role: 'user', content: '请问比奇堡最受欢迎的菜品有哪些？' },\n    //     { role: 'assistant', content: '当然是蟹堡王的招牌美食啦！我们的经典蟹堡、海藻薯条和珊瑚果汁都非常受欢迎。特别是蟹堡，采用秘制酱料配方，每天都有无数顾客专程来品尝呢！' }\n    //   ]\n    // },\n    // { \n    //   title: '配送服务咨询',\n    //   messages: [\n    //     { role: 'user', content: '你们有送餐服务吗？我在水母荡。' },\n    //     { role: 'assistant', content: '是的，我们提供送餐服务！水母荡在我们的配送范围内。派大星是我们最可靠的送餐员，保证30分钟内送达，否则您可以获得一个免费的海藻汉堡！' }\n    //   ]\n    // },\n    {\n      title: '这里都是前端写死的'\n    }, {\n      title: '因为后端还没接数据库'\n    }, {\n      title: '大家要用的话自己改一下'\n    }]);\n    const currentConversationIndex = ref(0);\n    const userInput = ref('');\n    const isListening = ref(false);\n    const chatMessagesRef = ref(null);\n    const isRecording = ref(false);\n    let mediaRecorder = null;\n    let audioChunks = [];\n    const mediaStream = ref(null);\n    const isInputDisabled = ref(false);\n    const currentConversation = computed(() => historyList.value[currentConversationIndex.value]);\n    const selectConversation = index => {\n      currentConversationIndex.value = index;\n      nextTick(() => {\n        scrollToBottom();\n      });\n    };\n    const newConversation = () => {\n      historyList.value.unshift({\n        title: '新对话',\n        // 实际上这里要和后端交互的话，messages 最好用 map 格式，key 是对应的 id，这样方便后端根据 id 来操作消息\n        messages: [{\n          role: 'assistant',\n          content: '您好！我是蟹堡王的神奇海螺，很高兴为您服务！我可以回答关于蟹堡王和汉堡制作的任何问题，您有什么需要帮助的吗？'\n        }]\n      });\n      currentConversationIndex.value = 0;\n    };\n    const sendMessage = async () => {\n      if (userInput.value.trim()) {\n        // 添加用户消息\n        currentConversation.value.messages.push({\n          role: 'user',\n          content: userInput.value\n        });\n        const prompt = userInput.value;\n        userInput.value = '';\n        nextTick(() => {\n          scrollToBottom();\n        });\n        const loadingMessage = ref({\n          role: 'assistant',\n          content: '神奇海螺正在思考...',\n          loading: true // 标记为加载状态\n        });\n        currentConversation.value.messages.push(loadingMessage.value);\n        nextTick(() => {\n          scrollToBottom();\n        });\n\n        // 获取AI回复\n        try {\n          const res = await get(API.GENERATE, {\n            prompt: prompt\n          });\n          if (res.code == 100) {\n            // 更新加载中的消息为实际回复\n            loadingMessage.value.content = res.data;\n            loadingMessage.value.loading = false; // 更新为非加载状态\n            nextTick(() => {\n              scrollToBottom();\n            });\n          } else {\n            ElMessage.error(res.msg);\n            loadingMessage.value.content = '获取回复失败，请稍后重试';\n            loadingMessage.value.loading = false;\n            nextTick(() => {\n              scrollToBottom();\n            });\n          }\n        } catch (error) {\n          console.error('sendMessage error', error);\n          ElMessage.error('获取回复失败，请稍后重试');\n          loadingMessage.value.content = '获取回复失败，请稍后重试';\n          loadingMessage.value.loading = false;\n          nextTick(() => {\n            scrollToBottom();\n          });\n        }\n      }\n    };\n    const finishRecording = () => {\n      if (isRecording.value && mediaRecorder && mediaRecorder.state !== 'inactive') {\n        mediaRecorder.stop();\n        isRecording.value = false;\n        isInputDisabled.value = false;\n      }\n    };\n    const sendAudioMessage = audioBlob => {\n      const audioUrl = URL.createObjectURL(audioBlob);\n      currentConversation.value.messages.push({\n        role: 'user',\n        content: '发送了一条语音消息',\n        audioUrl: audioUrl\n      });\n      nextTick(() => {\n        scrollToBottom();\n      });\n    };\n    const toggleRecording = async () => {};\n    const stopMediaStream = () => {\n      if (mediaStream.value) {\n        mediaStream.value.getTracks().forEach(track => track.stop());\n        mediaStream.value = null;\n      }\n    };\n    const scrollToBottom = () => {\n      const chatMessages = chatMessagesRef.value;\n      chatMessages.scrollTop = chatMessages.scrollHeight;\n    };\n    onMounted(() => {});\n    onUnmounted(() => {\n      finishRecording();\n      stopMediaStream();\n    });\n    return {\n      __sfc: true,\n      historyList,\n      currentConversationIndex,\n      userInput,\n      isListening,\n      chatMessagesRef,\n      isRecording,\n      mediaRecorder,\n      audioChunks,\n      mediaStream,\n      isInputDisabled,\n      currentConversation,\n      selectConversation,\n      newConversation,\n      sendMessage,\n      finishRecording,\n      sendAudioMessage,\n      toggleRecording,\n      stopMediaStream,\n      scrollToBottom,\n      Link,\n      Microphone\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","nextTick","onMounted","onUnmounted","Link","Microphone","ElMessage","get","post","API","historyList","title","messages","role","content","currentConversationIndex","userInput","isListening","chatMessagesRef","isRecording","mediaRecorder","audioChunks","mediaStream","isInputDisabled","currentConversation","value","selectConversation","index","scrollToBottom","newConversation","unshift","sendMessage","trim","push","prompt","loadingMessage","loading","res","GENERATE","code","data","error","msg","console","finishRecording","state","stop","sendAudioMessage","audioBlob","audioUrl","URL","createObjectURL","toggleRecording","stopMediaStream","getTracks","forEach","track","chatMessages","scrollTop","scrollHeight"],"sources":["ChatPage.vue"],"sourcesContent":["<template>\n  <div class=\"ai-practice-container\">\n    <!-- 左侧历史对话记录 -->\n    <div class=\"history-panel\">\n      <div class=\"new-chat-container\">\n        <button class=\"new-chat-btn\" @click=\"newConversation\">\n          新建对话\n          <el-icon class=\"plus-icon\">\n            <Plus/>\n          </el-icon>\n        </button>\n      </div>\n      <ul class=\"history-list\">\n        <li v-for=\"(item, index) in historyList\" :key=\"index\" @click=\"selectConversation(index)\"\n            :class=\"{ active: currentConversationIndex === index }\">\n          {{ item.title }}\n        </li>\n      </ul>\n    </div>\n\n    <!-- 右侧对话页面 -->\n    <div class=\"chat-wrapper\">\n      <div class=\"chat-panel\">\n        <!-- 上半部分聊天界面 -->\n        <div class=\"chat-messages\" ref=\"chatMessagesRef\">\n          <div v-for=\"(message, index) in currentConversation.messages\" :key=\"index\" :class=\"['message', message.role]\">\n            <div class=\"avatar\">\n              <div v-if=\"message.role !== 'user'\" class=\"ai-avatar\">\n                <img src=\"@/assets/images/hailuo2.png\" alt=\"AI Avatar\">\n              </div>\n              <div v-else>\n                <img src=\"@/assets/images/user.png\" alt=\"Me\">\n              </div>\n            </div>\n            <div class=\"content\">\n              {{ message.content }}\n              <!--              <audio v-if=\"message.audioUrl\" :src=\"message.audioUrl\" controls></audio>-->\n              <!-- <AudioBase></AudioBase> -->\n            </div>\n          </div>\n        </div>\n\n        <!-- 输入框 -->\n        <div class=\"input-area\">\n          <div class=\"input-wrapper\">\n            <el-icon class=\"input-icon link-icon\">\n              <Link/>\n            </el-icon>\n            <input\n                v-model=\"userInput\"\n                @keyup.enter=\"sendMessage\"\n                placeholder=\"输入消息，按回车发送...\"\n                type=\"text\"\n                :disabled=\"isInputDisabled\"\n            >\n            <div class=\"button-group\">\n              <div class=\"audio-wave\" v-if=\"isRecording\" @click=\"finishRecording\">\n                <span v-for=\"n in 4\" :key=\"n\" :style=\"{ animationDelay: `${n * 0.2}s` }\"></span>\n              </div>\n              <el-icon v-else class=\"input-icon microphone-icon\" @click=\"toggleRecording\">\n                <Microphone/>\n              </el-icon>\n              <div class=\"separator\"></div>\n              <el-popover\n                  placement=\"top\"\n                  :width=\"200\"\n                  trigger=\"hover\"\n                  :disabled=\"!!userInput.trim()\"\n              >\n                <template #reference>\n                  <el-button\n                      class=\"send-button\"\n                      circle\n                      @click=\"sendMessage\"\n                      :disabled=\"!userInput.trim()\"\n                  >\n                    <el-icon>\n                      <Top/>\n                    </el-icon>\n                  </el-button>\n                </template>\n                <span>请文字/录音/上传语音回复</span>\n              </el-popover>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"disclaimer\">\n          服务生成的所有内容均由大模型生成，其生成内容的准确性和完整性无法保证\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport {ref, computed, nextTick, onMounted, onUnmounted} from 'vue';\nimport {Link, Microphone} from '@element-plus/icons';\nimport {ElMessage} from 'element-plus';\n// import AudioBase from \"@/components/AudioBase.vue\";\nimport {get, post} from '@/utils/request'\nimport {API} from '@/api/config'\n\nconst historyList = ref([\n  {\n    title: '推荐一些运动装备',\n    messages: [\n      {role: 'assistant', content: '您好！你需要什么帮助？'},\n      {role: 'user', content: '我想要一些运动装备'},\n      {\n        role: 'assistant',\n        content: '让我来帮您分析一下。您需要的是什么运动的装备呢？'\n      }\n    ]\n  },\n  // { \n  //   title: '比奇堡特色菜单咨询',\n  //   messages: [\n  //     { role: 'user', content: '请问比奇堡最受欢迎的菜品有哪些？' },\n  //     { role: 'assistant', content: '当然是蟹堡王的招牌美食啦！我们的经典蟹堡、海藻薯条和珊瑚果汁都非常受欢迎。特别是蟹堡，采用秘制酱料配方，每天都有无数顾客专程来品尝呢！' }\n  //   ]\n  // },\n  // { \n  //   title: '配送服务咨询',\n  //   messages: [\n  //     { role: 'user', content: '你们有送餐服务吗？我在水母荡。' },\n  //     { role: 'assistant', content: '是的，我们提供送餐服务！水母荡在我们的配送范围内。派大星是我们最可靠的送餐员，保证30分钟内送达，否则您可以获得一个免费的海藻汉堡！' }\n  //   ]\n  // },\n  {\n    title: '这里都是前端写死的',\n  },\n  {\n    title: '因为后端还没接数据库',\n  },\n  {\n    title: '大家要用的话自己改一下',\n  }\n]);\n\nconst currentConversationIndex = ref(0);\nconst userInput = ref('');\nconst isListening = ref(false);\nconst chatMessagesRef = ref(null);\nconst isRecording = ref(false);\nlet mediaRecorder = null;\nlet audioChunks = [];\nconst mediaStream = ref(null);\nconst isInputDisabled = ref(false);\n\nconst currentConversation = computed(() => historyList.value[currentConversationIndex.value]);\n\nconst selectConversation = (index) => {\n  currentConversationIndex.value = index;\n  nextTick(() => {\n    scrollToBottom();\n  });\n};\n\nconst newConversation = () => {\n  historyList.value.unshift({\n    title: '新对话',\n    // 实际上这里要和后端交互的话，messages 最好用 map 格式，key 是对应的 id，这样方便后端根据 id 来操作消息\n    messages: [{\n      role: 'assistant',\n      content: '您好！我是蟹堡王的神奇海螺，很高兴为您服务！我可以回答关于蟹堡王和汉堡制作的任何问题，您有什么需要帮助的吗？'\n    }]\n  });\n  currentConversationIndex.value = 0;\n};\n\nconst sendMessage = async () => {\n  if (userInput.value.trim()) {\n    // 添加用户消息\n    currentConversation.value.messages.push({role: 'user', content: userInput.value});\n    const prompt = userInput.value;\n    userInput.value = '';\n    nextTick(() => {\n      scrollToBottom();\n    });\n\n    const loadingMessage = ref({\n      role: 'assistant',\n      content: '神奇海螺正在思考...',\n      loading: true // 标记为加载状态\n    });\n    currentConversation.value.messages.push(loadingMessage.value);\n    nextTick(() => {\n      scrollToBottom();\n    });\n\n    // 获取AI回复\n    try {\n      const res = await get(API.GENERATE, {prompt: prompt});\n      if (res.code == 100) {\n        // 更新加载中的消息为实际回复\n        loadingMessage.value.content = res.data;\n        loadingMessage.value.loading = false; // 更新为非加载状态\n        nextTick(() => {\n          scrollToBottom();\n        });\n      } else {\n        ElMessage.error(res.msg);\n        loadingMessage.value.content = '获取回复失败，请稍后重试';\n        loadingMessage.value.loading = false;\n        nextTick(() => {\n          scrollToBottom();\n        });\n      }\n    } catch (error) {\n      console.error('sendMessage error', error);\n      ElMessage.error('获取回复失败，请稍后重试');\n      loadingMessage.value.content = '获取回复失败，请稍后重试';\n      loadingMessage.value.loading = false;\n      nextTick(() => {\n        scrollToBottom();\n      });\n    }\n  }\n};\n\nconst finishRecording = () => {\n  if (isRecording.value && mediaRecorder && mediaRecorder.state !== 'inactive') {\n    mediaRecorder.stop();\n    isRecording.value = false;\n    isInputDisabled.value = false;\n  }\n};\n\nconst sendAudioMessage = (audioBlob) => {\n  const audioUrl = URL.createObjectURL(audioBlob);\n  currentConversation.value.messages.push({\n    role: 'user',\n    content: '发送了一条语音消息',\n    audioUrl: audioUrl\n  });\n  nextTick(() => {\n    scrollToBottom();\n  });\n\n};\n\nconst toggleRecording = async () => {\n};\n\nconst stopMediaStream = () => {\n  if (mediaStream.value) {\n    mediaStream.value.getTracks().forEach(track => track.stop());\n    mediaStream.value = null;\n  }\n};\n\nconst scrollToBottom = () => {\n  const chatMessages = chatMessagesRef.value;\n  chatMessages.scrollTop = chatMessages.scrollHeight;\n};\n\n\nonMounted(() => {\n});\n\nonUnmounted(() => {\n  finishRecording();\n  stopMediaStream();\n});\n</script>\n\n<style scoped>\n/* 样式保持不变 */\n.ai-practice-container {\n  display: flex;\n  height: 100vh;\n  font-family: Arial, sans-serif;\n}\n\n.history-panel {\n  width: 280px;\n  background: linear-gradient(135deg, rgba(230, 240, 255, 0.01), rgba(240, 230, 255, 0.01));\n  background-color: #ffffff;\n  padding: 20px;\n  overflow-y: auto;\n}\n\n.new-chat-container {\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.new-chat-btn {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 13px; /* 略微增加内边距 */\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(to right, #0069e0, #0052bc); /* 改用更深的蓝色渐变 */\n  color: white;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: opacity 0.3s;\n  font-size: 14px; /* 加大字号 */\n  font-weight: bold; /* 加粗字体 */\n}\n\n.new-chat-btn:hover {\n  opacity: 0.9;\n}\n\n.history-list {\n  list-style-type: none;\n  padding: 0;\n}\n\n.history-list li {\n  padding: 10px;\n  margin-bottom: 10px;\n  background-color: #ffffff;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.history-list li:hover,\n.history-list li.active {\n  background-color: rgba(0, 105, 224, 0.15);\n  color: #0052bc;\n}\n\n.chat-wrapper {\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: linear-gradient(135deg,\n  rgba(0, 105, 224, 0.08),\n  rgba(0, 56, 148, 0.08)\n  );\n}\n\n.chat-panel {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  background-color: transparent;\n  box-shadow: none;\n  padding-top: 12px; /* 添加顶部内边距 */\n  /* padding-left: 10%;\n  padding-right: 10%; */\n}\n\n.visitor-info {\n  background-color: transparent; /* 背透明 */\n  padding: 15px 20px; /* 增加内边距 */\n  margin-bottom: 20px; /* 增加与第一条对话的距离 */\n  font-weight: bold;\n  color: #333;\n  text-align: left;\n  font-size: 18px; /* 增大字体大小 */\n}\n\n.chat-messages {\n  flex: 1;\n  overflow-y: auto;\n  padding-top: 20px;\n  padding-left: 10%;\n  padding-right: 10%;\n  background-color: transparent;\n  /* 修改滚动条颜色 */\n  scrollbar-width: thin;\n  scrollbar-color: rgba(0, 105, 224, 0.3) transparent;\n}\n\n/* 为 Webkit 浏览器（如 Chrome、Safari）自定义滚动条样式 */\n.chat-messages::-webkit-scrollbar {\n  width: 6px;\n}\n\n.chat-messages::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.chat-messages::-webkit-scrollbar-thumb {\n  background-color: rgba(0, 105, 224, 0.3);\n  border-radius: 3px;\n}\n\n.message {\n  display: flex;\n  margin-bottom: 20px;\n}\n\n.message .avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: #ffffff;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 10px;\n  overflow: hidden;\n}\n\n.message .avatar img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 50%;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #ffffff;\n}\n\n.message .content {\n  background-color: rgba(255, 255, 255, 1);\n  padding: 12px 18px; /* 增加内边距 */\n  border-radius: 10px;\n  max-width: 80%;\n  font-size: 16px; /* 增加字体大小 */\n  line-height: 1.8; /* 增加行高 */\n}\n\n.message.user {\n  flex-direction: row-reverse;\n}\n\n.message.user .avatar {\n  margin-right: 0;\n  margin-left: 10px;\n}\n\n.message.user .content {\n  background-color: rgba(0, 105, 224, 0.12);\n  color: black;\n}\n\n.input-area {\n  padding: 20px 10% 0 10%;\n  border-top: 0px solid #e0e0e0;\n  background-color: transparent;\n}\n\n.input-wrapper {\n  position: relative;\n  display: flex;\n  align-items: center;\n}\n\ninput {\n  width: 100%;\n  padding: 12px 110px 12px 50px; /* 调整右侧padding以适应新的按钮组 */\n  border: 1px solid rgba(204, 204, 204, 0.5);\n  border-radius: 25px;\n  font-size: 16px;\n  background-color: rgba(255, 255, 255, 0.7);\n  transition: border-color 0.3s;\n  height: 55px;\n}\n\ninput:focus {\n  outline: none;\n  border-color: #0069e0;\n}\n\ninput::placeholder {\n  color: #969696;\n}\n\n.button-group {\n  position: absolute;\n  right: 10px;\n  top: 50%;\n  transform: translateY(-50%);\n  display: flex;\n  align-items: center;\n}\n\n.input-icon {\n  color: #0069e0;\n  font-size: 24px;\n  cursor: pointer;\n}\n\n.link-icon {\n  position: absolute;\n  left: 18px;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n.microphone-icon {\n  margin-right: 0; /* 将右侧边距改为0 */\n}\n\n.separator {\n  width: 1px;\n  height: 25px;\n  background-color: rgba(204, 204, 204, 0.5);\n  margin: 0 10px;\n}\n\n.send-button {\n  width: 40px;\n  height: 40px;\n  background: linear-gradient(to right, #0069e0, #0052bc); /* 保持一致的蓝色渐变 */\n  border: none;\n  color: white;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n}\n\n.send-button:disabled {\n  background: rgba(0, 105, 224, 0.1);\n  color: rgba(0, 82, 188, 0.3);\n  cursor: default;\n}\n\n.send-button :deep(.el-icon) {\n  font-size: 24px;\n}\n\n.send-button:not(:disabled):hover {\n  opacity: 0.9;\n}\n\n/* 新增的免责声明样式 */\n.disclaimer {\n  font-size: 10px;\n  color: #999;\n  text-align: center;\n  margin-top: 12px;\n  margin-bottom: 12px;\n}\n\n.audio-wave {\n  display: flex;\n  align-items: center;\n  height: 24px;\n  width: 24px;\n}\n\n.audio-wave span {\n  display: inline-block;\n  width: 3px;\n  height: 100%;\n  margin-right: 1px;\n  background: #0069e0;\n  animation: audio-wave 0.8s infinite ease-in-out;\n}\n\n@keyframes audio-wave {\n  0%, 100% {\n    transform: scaleY(0.3);\n  }\n  50% {\n    transform: scaleY(1);\n  }\n}\n\n.message .content audio {\n  margin-top: 10px;\n  width: 100%;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}